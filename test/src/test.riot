<test>
    <div style="height: 64px; background: #000; color: #fff; font-size: 24px; padding: 8px 16px; box-sizing: border-box;">
        <div style="display: inline-block; width: 1px; margin-right: -1px; height: 100%; vertical-align: middle;"></div>
        <navigate href="/home"><span style={
            state.path === "home" || state.path === "" ? "text-decoration: underline;": ""
        }>Home</span></navigate>&nbsp;
        <navigate context="profile"><span style={
            state.path === "me" ? "text-decoration: underline;": ""
        }>Profile</span></navigate>
        <!--  <navigate context="home" style="color: {
            state.context === 'home' ? 'rgb(250, 120, 30)' : '#fff'
        };">Home</navigate>&nbsp;
        <navigate context="profile" style="color: {
            state.context === 'profile' ? 'rgb(250, 120, 30)' : '#fff'
        };">Profile</navigate>  -->
    </div>
    <!--  <navigate href="home">navigate to HOME</navigate>&nbsp;
    <navigate href="me">navigate to ME</navigate>&nbsp;
    <navigate href="users/{ Math.round(Math.random() * 32) }" replace>replace with USERS/:id</navigate>
    <div />
    <div />  -->
    <template is="router">
        <route path="" redirect="home" />
        <route path="home">
            <homepage need-loading />
        </route>
        <route path="me">
            <replace-test need-loading />
            <div>Friends:</div>
            <div style="padding-left: 1em;">
                <navigate href="users/2">Tizio</navigate><br>
                <navigate href="users/3">Caio</navigate><br>
                <navigate href="users/4">Sempronio</navigate>
            </div>
        </route>
        <route path="users/:id">{
            route.location.href
        }</route>
    </template>
 
    <script>
        import { Router, HistoryManager, URLManager } from "history-manager";
        import lazy from "@riotjs/lazy";
        window.Router = Router;
        window.HistoryManager = HistoryManager;
        
        if (window._ROUTER_BASE != null) {
            URLManager.base(window._ROUTER_BASE);
        }

        Router.setContext({
            name: "home",
            paths: [
                { path: "home" }// ,
                // { path: "me" },
                // { path: "accedi", fallback: true },
                // { path: "users/:id", fallback: true }
            ],
            default: "home"
        });
        Router.setContext({
            name: "profile",
            paths: [
                { path: "me" },
                { path: "accedi", fallback: true },
                { path: "users/:id", fallback: true }
            ],
            default: "me"
        });

        export default {
            _lastContext: null,
            _lastPath: null,
            onMounted() {
                Router.create().route("(.*)", (location) => {
                    let context = Router.getContext();
                    this._lastContext = context;
                    this._lastPath = location.pathname;
                    this.update({ context, path: this._lastPath });
                });
                Router.start("home").then(() => console.log("started"));
            },
            components: {
                homepage: lazy(() => import('./homepage.riot')),
                "replace-test": lazy(() => import('./replace-test.riot'))
            }
        }
    </script>
</test>
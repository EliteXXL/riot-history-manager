<rhm-route>
    <script>
        import { __ } from "riot";
        import {
            ROUTER,
            UNROUTE_METHOD,
            LAST_ROUTED,
            IS_ROUTER,
            ROUTE_PLACEHOLDER
        } from "./constants";
        import * as loadingBar from "./loading-bar";
        import { dispatchEventOver } from "./custom-event-handling";

        function onunroute(routeComponent, currentMount, route, router, shouldFireEvent, shouldResetUnroute) {
            const currentEl = currentMount.el;
            {
                if (shouldFireEvent) {
                    const unrouteEvent = new CustomEvent("unroute", { cancelable: false, detail: {
                        location: route.location,
                        keymap: route.keymap,
                        redirection: route.redirection
                    } });
                    dispatchEventOver(routeComponent.root.children, unrouteEvent, null, []);
                }
                const scope = Object.create(routeComponent[__.globals.PARENT_KEY_SYMBOL], { route: { value: {
                    location: route.location,
                    keymap: route.keymap,
                    redirection: route.redirection
                } } });
                currentMount.unmount( scope, routeComponent[__.globals.PARENT_KEY_SYMBOL] );
            }
            {
                const placeholder = routeComponent[ROUTE_PLACEHOLDER];
                placeholder.parentElement.removeChild(currentEl);
                // if want to keep some route for faster loading, just `display: none` the element
                // currentEl.style.display = "none";
            }
            if (shouldResetUnroute) {
                router[UNROUTE_METHOD] = () => {};
            }
        }

        function onloadingcomplete(routeComponent, currentMount, route, router, claimer) {
            if (router[LAST_ROUTED] !== routeComponent) {
                onunroute(routeComponent, currentMount, route, router, false, false);
                return;
            }
            const currentEl = currentMount.el;
            if (loadingBar.claimed(claimer)) {
                loadingBar.release(claimer);
            }
            const routerUNROUTE = router[UNROUTE_METHOD];
            let reachedRouterLoad = false;
            let unrouted = false;
            const thisUNROUTE = () => {
                if (unrouted) {
                    return;
                }
                unrouted = true;
                onunroute(routeComponent, currentMount, route, router, reachedRouterLoad, reachedRouterLoad);
            };
            router[UNROUTE_METHOD] = () => {
                window.removeEventListener("routerload", onrouterload, true);
                routerUNROUTE();
                thisUNROUTE();
            };

            window.addEventListener("routerload", onrouterload, true);

            function onrouterload() {
                window.removeEventListener("routerload", onrouterload, true);
                reachedRouterLoad = true;
                routerUNROUTE();
                router[UNROUTE_METHOD] = thisUNROUTE;
                currentEl.style.display = "block";
                {
                    const routeEvent = new CustomEvent("route", { cancelable: false, detail: {
                        location: route.location,
                        keymap: route.keymap,
                        redirection: route.redirection
                    } });
                    dispatchEventOver(currentEl.children, routeEvent, null, []);
                }
            }
        }

        function onroute(routeComponent) { return (function (location, keymap, redirection) {
            const route = { location, keymap, redirection };

            const claimer = Object.create(null);
            loadingBar.claim(claimer);

            const router = this[ROUTER];
            router[LAST_ROUTED] = this;

            const slot = this.slots[0];
            const currentEl = document.createElement("div");
            const placeholder = this[ROUTE_PLACEHOLDER];
            placeholder.parentElement.insertBefore(currentEl, placeholder);
            const currentMount = __.DOMBindings.template(slot.html, slot.bindings).mount(
                currentEl,
                Object.create(this[__.globals.PARENT_KEY_SYMBOL], { route: { value: { location, keymap, redirection } } }),
                this[__.globals.PARENT_KEY_SYMBOL]
            );
            currentEl.style.display = "none";
            
            const needLoading = [];
            const routerChildren = [];
            {
                const beforeRouteEvent = new CustomEvent("beforeroute", {
                    cancelable: false, detail: { location, keymap, redirection }
                });
                dispatchEventOver(currentEl.children, beforeRouteEvent, needLoading, routerChildren);
            }
            if (needLoading.length > 0) {
                let loaded = 0;
                const onrequestvisibility = () => {
                    currentEl.style.display = "block";
                };
                needLoading.forEach(el => {
                    loaded++;
                    const onload = el => {
                        const fn = () => {
                            currentEl.style.display = "none";
                            el.removeEventListener("requestvisibility", onrequestvisibility);
                            el.removeEventListener("load", fn);
                            Array.prototype.forEach.call(
                                currentEl.querySelectorAll("[need-loading]:not([need-loading='false'])"),
                                el => {
                                    if (needLoading.some(other => other === el)) { return; }
                                    needLoading.push(el);
                                    loaded++
                                    el.addEventListener("load", onload(el));
                                    el.addEventListener("requestvisibility", onrequestvisibility);
                                }
                            );
                            if (--loaded <= 0) {
                                onloadingcomplete(routeComponent, currentMount, route, router, claimer);
                            }
                        };
                        return fn;
                    };
                    el.addEventListener("requestvisibility", onrequestvisibility);
                    el.addEventListener("load", onload(el));
                });
            } else {
                onloadingcomplete(routeComponent, currentMount, route, router, claimer);
            }
        }).bind(routeComponent); }
        
        export default {
            _valid: false,
            _onroute: null,
            _path: null,
            onMounted() {
                const placeholder = this[ROUTE_PLACEHOLDER] = document.createComment("");
                this.root.replaceWith(placeholder);
                const router = this[__.globals.PARENT_KEY_SYMBOL][ROUTER];
                if (router == null) {
                    return;
                }
                this._valid = true;
                this[ROUTER] = router;
                
                if (this.props.redirect) {
                    router[ROUTER].redirect(this.props.path, this.props.redirect);
                } else {
                    router[ROUTER].route(this._path = this.props.path, this._onroute = onroute(this));
                }
            },
            onUnmounted() {
                if (this._onroute == null) {
                    return;
                }
                this[__.globals.PARENT_KEY_SYMBOL].router[ROUTER].unroute(this._path, this._onroute);
            }
        }
    </script>
</rhm-route>
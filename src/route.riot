<route>
    <script>
        import { __ } from "riot";
        import {
            ROUTER, UNROUTE_METHOD, LAST_ROUTED,
            claimLoadingBar, hasLoadingBar, endLoadingBar,
            dispatchEventOver
        } from "./misc";

        function onroute(routeComponent) { return (function (location, keymap, redirection) {
            const route = { location, keymap, redirection };

            const claimer = Object.create(null);
            claimLoadingBar(claimer);

            const router = this[__.globals.PARENT_KEY_SYMBOL].router;
            router[LAST_ROUTED] = this;

            const slot = this.slots[0];
            const currentEl = document.createElement("div");
            const currentMount = __.DOMBindings.template(slot.html, slot.bindings).mount(
                currentEl,
                { ...this[__.globals.PARENT_KEY_SYMBOL], route },
                this[__.globals.PARENT_KEY_SYMBOL]
            );
            const onloadingcomplete = () => {
                if (router[LAST_ROUTED] !== this) {
                    return;
                }
                if (hasLoadingBar(claimer)) {
                    endLoadingBar(claimer);
                }
                router[UNROUTE_METHOD]();
                router[UNROUTE_METHOD] = () => {
                    const unrouteEvent = new CustomEvent("unroute", { cancelable: false, detail: {
                        location, keymap, redirection
                    } });
                    dispatchEventOver(this.root.children, unrouteEvent, null, []);
                    this.root.innerHTML = "";
                };
                while (currentEl.childNodes.length) {
                    const node = currentEl.childNodes[0];
                    currentEl.removeChild(node);
                    this.root.appendChild(node);
                }
                const routeEvent = new CustomEvent("route", { cancelable: false, detail: {
                    location, keymap, redirection
                } });
                dispatchEventOver(this.root.children, routeEvent, null, []);
            };
            
            const needLoading = [];
            const routerChildren = [];
            {
                const beforeRouteEvent = new CustomEvent("beforeroute", { cancelable: false, detail: {
                    location, keymap, redirection
                } });
                dispatchEventOver(currentEl.children, beforeRouteEvent, needLoading, routerChildren);
            }
            if (needLoading.length > 0) {
                let loaded = 0;
                needLoading.forEach(el => {
                    loaded++;
                    const onload = el => {
                        const fn = () => {
                            el.removeEventListener("load", fn);
                            Array.prototype.forEach.call(
                                currentEl.querySelectorAll("[need-loading]:not([need-loading='false'])"),
                                el => {
                                    if (needLoading.some(other => other === el)) { return; }
                                    needLoading.push(el);
                                    loaded++
                                    el.addEventListener("load", onload(el));
                                }
                            );
                            if (--loaded <= 0) { onloadingcomplete(); }
                        };
                        return fn;
                    };
                    el.addEventListener("load", onload(el));
                });
            } else {
                onloadingcomplete();
            }
        }).bind(routeComponent); }

        export default {
            _valid: false,
            onMounted() {
                const router = this[__.globals.PARENT_KEY_SYMBOL].router;
                if (router == null) {
                    return;
                }
                this._valid = true;

                if (this.props.redirect) {
                    router[ROUTER].redirect(this.props.path, this.props.redirect);
                } else {
                    router[ROUTER].route(this.props.path, onroute(this));
                }
            }
        }
    </script>
</route>
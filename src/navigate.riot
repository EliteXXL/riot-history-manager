<navigate>
<!--  Giuliano Collacchioni: 2019  -->
    <a href={ href() } style="display: { root.style.display }; width: 100%; height: 100%;" ref="-navigate-a">
        <slot />
    </a>

    <style>
        /* TODO: :host { display: contents !important; } */
        a[ref=-navigate-a] {
            color: inherit;
            text-decoration: none;
            outline: none;
        }
    </style>

    <script>
        import { Router as router } from "history-manager";

        export default {
            onMounted() {
                this.root.style.cursor = "pointer";
                if (this.root.style.display === "") {
                    this.root.style.display = "inline";
                }

                this.root.setAttribute("route-listener", "true");
                this.root.addEventListener("route", () => {
                    this.update();
                });
                
                this.root.firstElementChild.addEventListener("click", event => {
                    // console.log(event);
                    event.preventDefault();
                    let href = this.href(false);
                    if (href != null) {
                        // console.log("got href:", this.href(false), this.props.href);
                        router.go(href, { replace: this.replace() });
                        // event.stopPropagation();
                    } else {
                        let context = this.context();
                        if (context) {
                            router.restoreContext(context);
                        }
                    }
                    return false;
                });
            },
            onBeforeUpdate() {
                this._href = null;
            },
            replace() {
                if (typeof this.props.replace !== "boolean") {
                    return (this.props.replace && this.props.replace !== "false") || this.props.replace === "";
                }
                return this.props.replace;
            },
            href(toA = true) {
                if (typeof this.props.href !== "string") {
                    return null;
                }
                if (this._href == null) {
                    this._href = router.getLocation().hrefIf(this.props.href);
                    // console.log("got href", this._href, "from", this.props.href, "and", router.location.href, this.root);
                }
                return this._href; // (toA ? router.base : "") + this._href;
            },
            context() {
                if (typeof this.props.context !== "string") {
                    return null;
                }
                return this.props.context;
            }
        }
    </script>
</navigate>